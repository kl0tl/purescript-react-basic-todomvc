// Generated by purs version 0.13.6
import * as Data_Ordering from "../Data.Ordering/index.js";
import * as Type_Data_Boolean from "../Type.Data.Boolean/index.js";
var OProxy = (function () {
    function OProxy() {

    };
    OProxy.value = new OProxy();
    return OProxy;
})();
var IsOrdering = function (reflectOrdering) {
    this.reflectOrdering = reflectOrdering;
};
var Invert = {};
var Equals = {};
var Append = {};
var reflectOrdering = function (dict) {
    return dict.reflectOrdering;
};
var isOrderingLT = new IsOrdering(function (v) {
    return Data_Ordering.LT.value;
});
var isOrderingGT = new IsOrdering(function (v) {
    return Data_Ordering.GT.value;
});
var isOrderingEQ = new IsOrdering(function (v) {
    return Data_Ordering.EQ.value;
});
var reifyOrdering = function (v) {
    return function (f) {
        if (v instanceof Data_Ordering.LT) {
            return f(isOrderingLT)(OProxy.value);
        };
        if (v instanceof Data_Ordering.EQ) {
            return f(isOrderingEQ)(OProxy.value);
        };
        if (v instanceof Data_Ordering.GT) {
            return f(isOrderingGT)(OProxy.value);
        };
        throw new Error("Failed pattern match at Type.Data.Ordering (line 32, column 1 - line 32, column 86): " + [ v.constructor.name, f.constructor.name ]);
    };
};
var invertOrderingLT = Invert;
var invertOrderingGT = Invert;
var invertOrderingEQ = Invert;
var invert = function (dictInvert) {
    return function (v) {
        return OProxy.value;
    };
};
var equalsLTLT = Equals;
var equalsLTGT = Equals;
var equalsLTEQ = Equals;
var equalsGTLT = Equals;
var equalsGTGT = Equals;
var equalsGTEQ = Equals;
var equalsEQLT = Equals;
var equalsEQGT = Equals;
var equalsEQEQ = Equals;
var equals = function (dictEquals) {
    return function (v) {
        return function (v1) {
            return Type_Data_Boolean.BProxy.value;
        };
    };
};
var appendOrderingLT = Append;
var appendOrderingGT = Append;
var appendOrderingEQ = Append;
var append = function (dictAppend) {
    return function (v) {
        return function (v1) {
            return OProxy.value;
        };
    };
};
export {
    OProxy,
    IsOrdering,
    reflectOrdering,
    reifyOrdering,
    Append,
    append,
    Invert,
    invert,
    Equals,
    equals,
    isOrderingLT,
    isOrderingEQ,
    isOrderingGT,
    appendOrderingLT,
    appendOrderingEQ,
    appendOrderingGT,
    invertOrderingLT,
    invertOrderingEQ,
    invertOrderingGT,
    equalsEQEQ,
    equalsLTLT,
    equalsGTGT,
    equalsEQLT,
    equalsEQGT,
    equalsLTEQ,
    equalsLTGT,
    equalsGTLT,
    equalsGTEQ
};
