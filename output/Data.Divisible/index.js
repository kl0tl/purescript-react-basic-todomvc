// Generated by purs version 0.13.6
import * as Data_Comparison from "../Data.Comparison/index.js";
import * as Data_Divide from "../Data.Divide/index.js";
import * as Data_Equivalence from "../Data.Equivalence/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Op from "../Data.Op/index.js";
import * as Data_Ordering from "../Data.Ordering/index.js";
var Divisible = function (Divide0, conquer) {
    this.Divide0 = Divide0;
    this.conquer = conquer;
};
var divisiblePredicate = new Divisible(function () {
    return Data_Divide.dividePredicate;
}, Data_Function["const"](true));
var divisibleOp = function (dictMonoid) {
    return new Divisible(function () {
        return Data_Divide.divideOp(dictMonoid.Semigroup0());
    }, Data_Op.Op(Data_Function["const"](Data_Monoid.mempty(dictMonoid))));
};
var divisibleEquivalence = new Divisible(function () {
    return Data_Divide.divideEquivalence;
}, Data_Equivalence.Equivalence(function (v) {
    return function (v1) {
        return true;
    };
}));
var divisibleComparison = new Divisible(function () {
    return Data_Divide.divideComparison;
}, Data_Comparison.Comparison(function (v) {
    return function (v1) {
        return Data_Ordering.EQ.value;
    };
}));
var conquer = function (dict) {
    return dict.conquer;
};
export {
    conquer,
    Divisible,
    divisibleComparison,
    divisibleEquivalence,
    divisiblePredicate,
    divisibleOp
};
