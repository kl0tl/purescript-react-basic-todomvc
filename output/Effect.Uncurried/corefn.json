{"moduleName":["Effect","Uncurried"],"imports":[{"annotation":{"meta":null,"sourceSpan":{"start":[135,1],"end":[135,23]}},"moduleName":["Effect"]},{"annotation":{"meta":null,"sourceSpan":{"start":[133,1],"end":[188,97]}},"moduleName":["Prim"]}],"builtWith":"0.13.6","modulePath":".spago/effect/v2.0.1/src/Effect/Uncurried.purs","exports":["mkEffectFn1","mkEffectFn2","mkEffectFn3","mkEffectFn4","mkEffectFn5","mkEffectFn6","mkEffectFn7","mkEffectFn8","mkEffectFn9","mkEffectFn10","runEffectFn1","runEffectFn2","runEffectFn3","runEffectFn4","runEffectFn5","runEffectFn6","runEffectFn7","runEffectFn8","runEffectFn9","runEffectFn10"],"decls":[],"comments":[{"LineComment":" | This module defines types for effectful uncurried functions, as well as"},{"LineComment":" | functions for converting back and forth between them."},{"LineComment":" |"},{"LineComment":" | This makes it possible to give a PureScript type to JavaScript functions"},{"LineComment":" | such as this one:"},{"LineComment":" |"},{"LineComment":" | ```javascript"},{"LineComment":" | function logMessage(level, message) {"},{"LineComment":" |   console.log(level + \": \" + message);"},{"LineComment":" | }"},{"LineComment":" | ```"},{"LineComment":" |"},{"LineComment":" | In particular, note that `logMessage` performs effects immediately after"},{"LineComment":" | receiving all of its parameters, so giving it the type `Data.Function.Fn2"},{"LineComment":" | String String Unit`, while convenient, would effectively be a lie."},{"LineComment":" |"},{"LineComment":" | One way to handle this would be to convert the function into the normal"},{"LineComment":" | PureScript form (namely, a curried function returning an Effect action),"},{"LineComment":" | and performing the marshalling in JavaScript, in the FFI module, like this:"},{"LineComment":" |"},{"LineComment":" | ```purescript"},{"LineComment":" | -- In the PureScript file:"},{"LineComment":" | foreign import logMessage :: String -> String -> Effect Unit"},{"LineComment":" | ```"},{"LineComment":" |"},{"LineComment":" | ```javascript"},{"LineComment":" | // In the FFI file:"},{"LineComment":" | exports.logMessage = function(level) {"},{"LineComment":" |   return function(message) {"},{"LineComment":" |     return function() {"},{"LineComment":" |       logMessage(level, message);"},{"LineComment":" |     };"},{"LineComment":" |   };"},{"LineComment":" | };"},{"LineComment":" | ```"},{"LineComment":" |"},{"LineComment":" | This method, unfortunately, turns out to be both tiresome and error-prone."},{"LineComment":" | This module offers an alternative solution. By providing you with:"},{"LineComment":" |"},{"LineComment":" |  * the ability to give the real `logMessage` function a PureScript type,"},{"LineComment":" |    and"},{"LineComment":" |  * functions for converting between this form and the normal PureScript"},{"LineComment":" |    form,"},{"LineComment":" |"},{"LineComment":" | the FFI boilerplate is no longer needed. The previous example becomes:"},{"LineComment":" |"},{"LineComment":" | ```purescript"},{"LineComment":" | -- In the PureScript file:"},{"LineComment":" | foreign import logMessageImpl :: EffectFn2 String String Unit"},{"LineComment":" | ```"},{"LineComment":" |"},{"LineComment":" | ```javascript"},{"LineComment":" | // In the FFI file:"},{"LineComment":" | exports.logMessageImpl = logMessage"},{"LineComment":" | ```"},{"LineComment":" |"},{"LineComment":" | You can then use `runEffectFn2` to provide a nicer version:"},{"LineComment":" |"},{"LineComment":" | ```purescript"},{"LineComment":" | logMessage :: String -> String -> Effect Unit"},{"LineComment":" | logMessage = runEffectFn2 logMessageImpl"},{"LineComment":" | ```"},{"LineComment":" |"},{"LineComment":" | (note that this has the same type as the original `logMessage`)."},{"LineComment":" |"},{"LineComment":" | Effectively, we have reduced the risk of errors by moving as much code into"},{"LineComment":" | PureScript as possible, so that we can leverage the type system. Hopefully,"},{"LineComment":" | this is a little less tiresome too."},{"LineComment":" |"},{"LineComment":" | Here's a slightly more advanced example. Here, because we are using"},{"LineComment":" | callbacks, we need to use `mkEffectFn{N}` as well."},{"LineComment":" |"},{"LineComment":" | Suppose our `logMessage` changes so that it sometimes sends details of the"},{"LineComment":" | message to some external server, and in those cases, we want the resulting"},{"LineComment":" | `HttpResponse` (for whatever reason)."},{"LineComment":" |"},{"LineComment":" | ```javascript"},{"LineComment":" | function logMessage(level, message, callback) {"},{"LineComment":" |   console.log(level + \": \" + message);"},{"LineComment":" |   if (level > LogLevel.WARN) {"},{"LineComment":" |     LogAggregatorService.post(\"/logs\", {"},{"LineComment":" |       level: level,"},{"LineComment":" |       message: message"},{"LineComment":" |     }, callback);"},{"LineComment":" |   } else {"},{"LineComment":" |     callback(null);"},{"LineComment":" |   }"},{"LineComment":" | }"},{"LineComment":" | ```"},{"LineComment":" |"},{"LineComment":" | The import then looks like this:"},{"LineComment":" | ```purescript"},{"LineComment":" | foreign import logMessageImpl"},{"LineComment":" |  EffectFn3"},{"LineComment":" |    String"},{"LineComment":" |    String"},{"LineComment":" |    (EffectFn1 (Nullable HttpResponse) Unit)"},{"LineComment":" |    Unit"},{"LineComment":" | ```"},{"LineComment":" |"},{"LineComment":" | And, as before, the FFI file is extremely simple:"},{"LineComment":" |"},{"LineComment":" | ```javascript"},{"LineComment":" | exports.logMessageImpl = logMessage"},{"LineComment":" | ```"},{"LineComment":" |"},{"LineComment":" | Finally, we use `runEffectFn{N}` and `mkEffectFn{N}` for a more comfortable"},{"LineComment":" | PureScript version:"},{"LineComment":" |"},{"LineComment":" | ```purescript"},{"LineComment":" | logMessage ::"},{"LineComment":" |   String ->"},{"LineComment":" |   String ->"},{"LineComment":" |   (Nullable HttpResponse -> Effect Unit) ->"},{"LineComment":" |   Effect Unit"},{"LineComment":" | logMessage level message callback ="},{"LineComment":" |   runEffectFn3 logMessageImpl level message (mkEffectFn1 callback)"},{"LineComment":" | ```"},{"LineComment":" |"},{"LineComment":" | The general naming scheme for functions and types in this module is as"},{"LineComment":" | follows:"},{"LineComment":" |"},{"LineComment":" | * `EffectFn{N}` means, an uncurried function which accepts N arguments and"},{"LineComment":" |   performs some effects. The first N arguments are the actual function's"},{"LineComment":" |   argument. The last type argument is the return type."},{"LineComment":" | * `runEffectFn{N}` takes an `EffectFn` of N arguments, and converts it into"},{"LineComment":" |   the normal PureScript form: a curried function which returns an Effect"},{"LineComment":" |   action."},{"LineComment":" | * `mkEffectFn{N}` is the inverse of `runEffectFn{N}`. It can be useful for"},{"LineComment":" |   callbacks."},{"LineComment":" |"}],"foreign":["mkEffectFn1","mkEffectFn2","mkEffectFn3","mkEffectFn4","mkEffectFn5","mkEffectFn6","mkEffectFn7","mkEffectFn8","mkEffectFn9","mkEffectFn10","runEffectFn1","runEffectFn2","runEffectFn3","runEffectFn4","runEffectFn5","runEffectFn6","runEffectFn7","runEffectFn8","runEffectFn9","runEffectFn10"],"sourceSpan":{"start":[133,1],"end":[188,97]}}