// Generated by purs version 0.13.6
import * as Control_Category from "../Control.Category/index.js";
import * as Control_Semigroupoid from "../Control.Semigroupoid/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Symbol from "../Data.Symbol/index.js";
import * as Effect_Uncurried from "../Effect.Uncurried/index.js";
import * as Record from "../Record/index.js";
import * as Type_Data_RowList from "../Type.Data.RowList/index.js";
var EventFn = function (x) {
    return x;
};
var Merge = function (mergeImpl) {
    this.mergeImpl = mergeImpl;
};
var unsafeEventFn = EventFn;
var semigroupoidBuilder = Control_Semigroupoid.semigroupoidFn;
var mergeNil = new Merge(function (v) {
    return function (v1) {
        return function (v2) {
            return {};
        };
    };
});
var mergeImpl = function (dict) {
    return dict.mergeImpl;
};
var mergeCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictCons1) {
            return function (dictLacks) {
                return function (dictLacks1) {
                    return function (dictMerge) {
                        return new Merge(function (v) {
                            return function (fns) {
                                return function (a) {
                                    var v1 = mergeImpl(dictMerge)(Type_Data_RowList.RLProxy.value)(Record["delete"](dictIsSymbol)()()(Data_Symbol.SProxy.value)(fns));
                                    var v2 = Record.get(dictIsSymbol)()(Data_Symbol.SProxy.value)(fns);
                                    return Record.insert(dictIsSymbol)()()(Data_Symbol.SProxy.value)(v2(a))(v1(a));
                                };
                            };
                        });
                    };
                };
            };
        };
    };
};
var merge = function (dictRowToList) {
    return function (dictMerge) {
        return mergeImpl(dictMerge)(Type_Data_RowList.RLProxy.value);
    };
};
var handler_ = function ($21) {
    return Effect_Uncurried.mkEffectFn1(Data_Function["const"]($21));
};
var handler = function (v) {
    return function (cb) {
        return function ($22) {
            return cb(v($22))();
        };
    };
};
var categoryBuilder = Control_Category.categoryFn;
var syntheticEvent = Control_Category.identity(categoryBuilder);
export {
    unsafeEventFn,
    handler,
    handler_,
    syntheticEvent,
    merge,
    Merge,
    mergeImpl,
    semigroupoidBuilder,
    categoryBuilder,
    mergeNil,
    mergeCons
};
