// Generated by purs version 0.13.6
import * as Control_Alt from "../Control.Alt/index.js";
import * as Control_Alternative from "../Control.Alternative/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Plus from "../Control.Plus/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_List_Lazy from "../Data.List.Lazy/index.js";
import * as Data_List_Lazy_Types from "../Data.List.Lazy.Types/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Newtype from "../Data.Newtype/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Partial_Unsafe from "../Partial.Unsafe/index.js";
var ZipList = function (x) {
    return x;
};
var traversableZipList = Data_List_Lazy_Types.traversableList;
var showZipList = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(ZipList " + (Data_Show.show(Data_List_Lazy_Types.showList(dictShow))(v) + ")");
    });
};
var semigroupZipList = Data_List_Lazy_Types.semigroupList;
var ordZipList = function (dictOrd) {
    return Data_List_Lazy_Types.ordList(dictOrd);
};
var newtypeZipList = new Data_Newtype.Newtype(function (n) {
    return n;
}, ZipList);
var monoidZipList = Data_List_Lazy_Types.monoidList;
var functorZipList = Data_List_Lazy_Types.functorList;
var foldableZipList = Data_List_Lazy_Types.foldableList;
var eqZipList = function (dictEq) {
    return Data_List_Lazy_Types.eqList(dictEq);
};
var applyZipList = new Control_Apply.Apply(function () {
    return functorZipList;
}, function (v) {
    return function (v1) {
        return Data_List_Lazy.zipWith(Data_Function.apply)(v)(v1);
    };
});
var zipListIsNotBind = function (dictFail) {
    return new Control_Bind.Bind(function () {
        return applyZipList;
    }, Partial_Unsafe.unsafeCrashWith("bind: unreachable"));
};
var applicativeZipList = new Control_Applicative.Applicative(function () {
    return applyZipList;
}, function ($13) {
    return ZipList(Data_List_Lazy.repeat($13));
});
var altZipList = new Control_Alt.Alt(function () {
    return functorZipList;
}, Data_Semigroup.append(semigroupZipList));
var plusZipList = new Control_Plus.Plus(function () {
    return altZipList;
}, Data_Monoid.mempty(monoidZipList));
var alternativeZipList = new Control_Alternative.Alternative(function () {
    return applicativeZipList;
}, function () {
    return plusZipList;
});
export {
    ZipList,
    showZipList,
    newtypeZipList,
    eqZipList,
    ordZipList,
    semigroupZipList,
    monoidZipList,
    foldableZipList,
    traversableZipList,
    functorZipList,
    applyZipList,
    applicativeZipList,
    altZipList,
    plusZipList,
    alternativeZipList,
    zipListIsNotBind
};
