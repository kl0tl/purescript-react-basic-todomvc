// Generated by purs version 0.13.6
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Biapplicative from "../Control.Biapplicative/index.js";
import * as Control_Biapply from "../Control.Biapply/index.js";
import * as Data_Bifunctor from "../Data.Bifunctor/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Newtype from "../Data.Newtype/index.js";
import * as Data_Show from "../Data.Show/index.js";
var Join = function (x) {
    return x;
};
var showJoin = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Join " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var ordJoin = function (dictOrd) {
    return dictOrd;
};
var newtypeJoin = new Data_Newtype.Newtype(function (n) {
    return n;
}, Join);
var eqJoin = function (dictEq) {
    return dictEq;
};
var bifunctorJoin = function (dictBifunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            return Data_Bifunctor.bimap(dictBifunctor)(f)(f)(v);
        };
    });
};
var biapplyJoin = function (dictBiapply) {
    return new Control_Apply.Apply(function () {
        return bifunctorJoin(dictBiapply.Bifunctor0());
    }, function (v) {
        return function (v1) {
            return Control_Biapply.biapply(dictBiapply)(v)(v1);
        };
    });
};
var biapplicativeJoin = function (dictBiapplicative) {
    return new Control_Applicative.Applicative(function () {
        return biapplyJoin(dictBiapplicative.Biapply0());
    }, function (a) {
        return Control_Biapplicative.bipure(dictBiapplicative)(a)(a);
    });
};
export {
    Join,
    newtypeJoin,
    eqJoin,
    ordJoin,
    showJoin,
    bifunctorJoin,
    biapplyJoin,
    biapplicativeJoin
};
