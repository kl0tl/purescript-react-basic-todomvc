// Generated by purs version 0.13.6
import * as $foreign from "./foreign.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_HeytingAlgebra from "../Data.HeytingAlgebra/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Data_Symbol from "../Data.Symbol/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Effect from "../Effect/index.js";
import * as LocalStorage from "../LocalStorage/index.js";
import * as React_Basic from "../React.Basic/index.js";
import * as React_Basic_DOM from "../React.Basic.DOM/index.js";
import * as React_Basic_DOM_Events from "../React.Basic.DOM.Events/index.js";
import * as React_Basic_DOM_Generated from "../React.Basic.DOM.Generated/index.js";
import * as React_Basic_DOM_Internal from "../React.Basic.DOM.Internal/index.js";
import * as React_Basic_Events from "../React.Basic.Events/index.js";
import * as Simple_JSON from "../Simple.JSON/index.js";
import * as Todo_Footer from "../Todo.Footer/index.js";
import * as Todo_Task from "../Todo.Task/index.js";
import * as Todo_View from "../Todo.View/index.js";
var EditNewTodo = (function () {
    function EditNewTodo(value0) {
        this.value0 = value0;
    };
    EditNewTodo.create = function (value0) {
        return new EditNewTodo(value0);
    };
    return EditNewTodo;
})();
var SubmitNewTodo = (function () {
    function SubmitNewTodo(value0) {
        this.value0 = value0;
    };
    SubmitNewTodo.create = function (value0) {
        return new SubmitNewTodo(value0);
    };
    return SubmitNewTodo;
})();
var TaskCheck = (function () {
    function TaskCheck(value0) {
        this.value0 = value0;
    };
    TaskCheck.create = function (value0) {
        return new TaskCheck(value0);
    };
    return TaskCheck;
})();
var TaskUpdate = (function () {
    function TaskUpdate(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    TaskUpdate.create = function (value0) {
        return function (value1) {
            return new TaskUpdate(value0, value1);
        };
    };
    return TaskUpdate;
})();
var TaskDelete = (function () {
    function TaskDelete(value0) {
        this.value0 = value0;
    };
    TaskDelete.create = function (value0) {
        return new TaskDelete(value0);
    };
    return TaskDelete;
})();
var ClearCompleted = (function () {
    function ClearCompleted() {

    };
    ClearCompleted.value = new ClearCompleted();
    return ClearCompleted;
})();
var CheckAllTasks = (function () {
    function CheckAllTasks(value0) {
        this.value0 = value0;
    };
    CheckAllTasks.create = function (value0) {
        return new CheckAllTasks(value0);
    };
    return CheckAllTasks;
})();
var UpdateVisibility = (function () {
    function UpdateVisibility(value0) {
        this.value0 = value0;
    };
    UpdateVisibility.create = function (value0) {
        return new UpdateVisibility(value0);
    };
    return UpdateVisibility;
})();
var LoadState = (function () {
    function LoadState(value0) {
        this.value0 = value0;
    };
    LoadState.create = function (value0) {
        return new LoadState(value0);
    };
    return LoadState;
})();
var Noop = (function () {
    function Noop() {

    };
    Noop.value = new Noop();
    return Noop;
})();
var taskList = function (v) {
    var toggleAllAttributes = {
        className: "toggle-all",
        id: "toggle-all",
        type: "checkbox",
        checked: Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v1) {
            return v1.completed;
        })(v.tasks),
        onChange: v.checkAllTasks
    };
    var taskView = function (task) {
        return Todo_Task.component({
            key: task.id,
            task: task,
            onCheck: v.onCheck(task.id),
            onDelete: v.onDelete(task.id),
            onCommit: v.onCommit(task.id)
        });
    };
    var isVisible = function (task) {
        if (v.visibility instanceof Todo_Footer.Completed) {
            return task.completed;
        };
        if (v.visibility instanceof Todo_Footer.Active) {
            return !task.completed;
        };
        return true;
    };
    return React_Basic_DOM_Generated.section()({
        className: "main",
        style: React_Basic_DOM_Internal.css({
            visibility: (function () {
                var $215 = Data_Array["null"](v.tasks);
                if ($215) {
                    return "hidden";
                };
                return "visible";
            })()
        }),
        children: [ React_Basic_DOM_Generated.input()(toggleAllAttributes), React_Basic_DOM_Generated.label()({
            htmlFor: "toggle-all",
            children: [ React_Basic_DOM.text("Mark all as complete") ]
        }), Todo_View.classy(React_Basic_DOM_Generated.ul())("todo-list")(Data_Functor.map(Data_Functor.functorArray)(taskView)(Data_Array.filter(isVisible)(v.tasks))) ]
    });
};
var taskEntry = function (value) {
    return function (onEdit) {
        return function (onKeyDown) {
            var attributes = {
                className: "new-todo",
                placeholder: "What needs to be done?",
                autoFocus: true,
                value: value,
                name: "newTodo",
                onChange: onEdit,
                onKeyDown: onKeyDown
            };
            return Todo_View.classy(React_Basic_DOM_Generated.header())("header")([ React_Basic_DOM_Generated.h1_([ React_Basic_DOM.text("todos") ]), React_Basic_DOM_Generated.input()(attributes) ]);
        };
    };
};
var localStorageKey = "todomvc-purescript-state";
var saveState = function (state) {
    return LocalStorage.setItem(Simple_JSON.recordWriteForeign()(Simple_JSON.consWriteForeignFields(new Data_Symbol.IsSymbol(function ($dollar__unused) {
        return "newTodo";
    }))(Simple_JSON.writeForeignString)(Simple_JSON.consWriteForeignFields(new Data_Symbol.IsSymbol(function ($dollar__unused) {
        return "tasks";
    }))(Simple_JSON.writeForeignArray(Simple_JSON.recordWriteForeign()(Simple_JSON.consWriteForeignFields(new Data_Symbol.IsSymbol(function ($dollar__unused) {
        return "completed";
    }))(Simple_JSON.writeForeignBoolean)(Simple_JSON.consWriteForeignFields(new Data_Symbol.IsSymbol(function ($dollar__unused) {
        return "description";
    }))(Simple_JSON.writeForeignString)(Simple_JSON.consWriteForeignFields(new Data_Symbol.IsSymbol(function ($dollar__unused) {
        return "id";
    }))(Simple_JSON.writeForeignInt)(Simple_JSON.nilWriteForeignFields)()()())()()())()()())))(Simple_JSON.consWriteForeignFields(new Data_Symbol.IsSymbol(function ($dollar__unused) {
        return "uid";
    }))(Simple_JSON.writeForeignInt)(Simple_JSON.consWriteForeignFields(new Data_Symbol.IsSymbol(function ($dollar__unused) {
        return "visibility";
    }))(Todo_Footer.writeVisibility)(Simple_JSON.nilWriteForeignFields)()()())()()())()()())()()()))(localStorageKey)(state);
};
var initialState = {
    tasks: [  ],
    visibility: Todo_Footer.All.value,
    newTodo: "",
    uid: 0
};
var component = React_Basic.createComponent("App");
var app = function (v) {
    var update = function (self) {
        return function (action) {
            if (action instanceof EditNewTodo) {
                return new React_Basic.Update({
                    newTodo: Data_Maybe.fromMaybe("")(action.value0),
                    uid: self.state.uid,
                    tasks: self.state.tasks,
                    visibility: self.state.visibility
                });
            };
            if (action instanceof SubmitNewTodo) {
                var newTodo = {
                    description: action.value0,
                    id: self.state.uid,
                    completed: false
                };
                return new React_Basic.Update({
                    newTodo: "",
                    tasks: Data_Array.cons(newTodo)(self.state.tasks),
                    uid: self.state.uid + 1 | 0,
                    visibility: self.state.visibility
                });
            };
            if (action instanceof TaskCheck) {
                var negateCheck = function (task) {
                    var $225 = task.id === action.value0;
                    if ($225) {
                        return {
                            completed: !task.completed,
                            id: task.id,
                            description: task.description
                        };
                    };
                    return task;
                };
                return new React_Basic.Update({
                    tasks: Data_Functor.map(Data_Functor.functorArray)(negateCheck)(self.state.tasks),
                    newTodo: self.state.newTodo,
                    uid: self.state.uid,
                    visibility: self.state.visibility
                });
            };
            if (action instanceof TaskUpdate) {
                var updateTask = function (task) {
                    var $227 = task.id === action.value0;
                    if ($227) {
                        return {
                            description: action.value1,
                            id: task.id,
                            completed: task.completed
                        };
                    };
                    return task;
                };
                return new React_Basic.Update({
                    tasks: Data_Functor.map(Data_Functor.functorArray)(updateTask)(self.state.tasks),
                    newTodo: self.state.newTodo,
                    uid: self.state.uid,
                    visibility: self.state.visibility
                });
            };
            if (action instanceof TaskDelete) {
                var tasks$prime = Data_Array.filter((function () {
                    var $241 = Data_Eq.notEq(Data_Eq.eqInt)(action.value0);
                    return function ($242) {
                        return $241((function (v1) {
                            return v1.id;
                        })($242));
                    };
                })())(self.state.tasks);
                return new React_Basic.Update({
                    tasks: tasks$prime,
                    newTodo: self.state.newTodo,
                    uid: self.state.uid,
                    visibility: self.state.visibility
                });
            };
            if (action instanceof ClearCompleted) {
                var tasks$prime = Data_Array.filter(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(function (v1) {
                    return v1.completed;
                }))(self.state.tasks);
                return new React_Basic.Update({
                    tasks: tasks$prime,
                    newTodo: self.state.newTodo,
                    uid: self.state.uid,
                    visibility: self.state.visibility
                });
            };
            if (action instanceof CheckAllTasks) {
                var toggle = function (task) {
                    return {
                        completed: Data_Maybe.fromMaybe(task.completed)(action.value0),
                        description: task.description,
                        id: task.id
                    };
                };
                var tasks$prime = Data_Functor.map(Data_Functor.functorArray)(toggle)(self.state.tasks);
                return new React_Basic.Update({
                    tasks: tasks$prime,
                    newTodo: self.state.newTodo,
                    uid: self.state.uid,
                    visibility: self.state.visibility
                });
            };
            if (action instanceof UpdateVisibility) {
                return new React_Basic.Update({
                    visibility: action.value0,
                    newTodo: self.state.newTodo,
                    tasks: self.state.tasks,
                    uid: self.state.uid
                });
            };
            if (action instanceof LoadState) {
                return new React_Basic.Update(action.value0);
            };
            if (action instanceof Noop) {
                return React_Basic.NoUpdate.value;
            };
            throw new Error("Failed pattern match at Todo.App (line 111, column 7 - line 173, column 19): " + [ action.constructor.name ]);
        };
    };
    var send = React_Basic.runUpdate(update);
    var render = function (self) {
        var onTaskUpdate = function (id) {
            return function (newDescription) {
                return send(self)(new TaskUpdate(id, newDescription));
            };
        };
        var onTaskDelete = function (id) {
            return send(self)(new TaskDelete(id));
        };
        var onTaskCheck = function (id) {
            return send(self)(new TaskCheck(id));
        };
        var onKeyDown = (function () {
            var newDescription = Data_String_Common.trim(self.state.newTodo);
            var hasNewDescription = !Data_String_Common["null"](newDescription);
            return React_Basic_Events.handler(React_Basic_DOM_Events.key)(function (key) {
                return send(self)((function () {
                    if (key instanceof Data_Maybe.Just && (key.value0 === "Enter" && hasNewDescription)) {
                        return new SubmitNewTodo(newDescription);
                    };
                    return Noop.value;
                })());
            });
        })();
        var onEditNewTodo = React_Basic_DOM_Events.capture(React_Basic_DOM_Events.targetValue)((function () {
            var $243 = send(self);
            return function ($244) {
                return $243(EditNewTodo.create($244));
            };
        })());
        var clearCompleted = React_Basic_DOM_Events.capture_(send(self)(ClearCompleted.value));
        var checkAllTasks = React_Basic_Events.handler(React_Basic_DOM_Events.targetChecked)((function () {
            var $245 = send(self);
            return function ($246) {
                return $245(CheckAllTasks.create($246));
            };
        })());
        return Todo_View.classy(React_Basic_DOM_Generated.div())("todomvc-wrapper")([ Todo_View.classy(React_Basic_DOM_Generated.section())("todoapp")([ taskEntry(self.state.newTodo)(onEditNewTodo)(onKeyDown), taskList({
            tasks: self.state.tasks,
            visibility: self.state.visibility,
            onCheck: onTaskCheck,
            onDelete: onTaskDelete,
            onCommit: onTaskUpdate,
            checkAllTasks: checkAllTasks
        }), Todo_Footer.footer({
            tasks: self.state.tasks,
            onClearCompleted: clearCompleted,
            visibility: self.state.visibility
        }) ]) ]);
    };
    var didUpdate = function (self) {
        return function (v1) {
            return saveState(self.state);
        };
    };
    var didMount = function (v1) {
        var setVisibility = function (visibility) {
            return send(v1)(new UpdateVisibility(visibility));
        };
        var matchRoutes = function (hash) {
            if (hash === "#/") {
                return setVisibility(Todo_Footer.All.value);
            };
            if (hash === "#/active") {
                return setVisibility(Todo_Footer.Active.value);
            };
            if (hash === "#/completed") {
                return setVisibility(Todo_Footer.Completed.value);
            };
            return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
        };
        return Control_Bind.discard(Control_Bind.discardUnit)(Effect.bindEffect)(function () {
            return $foreign.startNavigation(matchRoutes);
        })(function ($dollar__unused) {
            return function __do() {
                var persisted = LocalStorage.getItem(Simple_JSON.readRecord()(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function ($dollar__unused) {
                    return "newTodo";
                }))(Simple_JSON.readString)(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function ($dollar__unused) {
                    return "tasks";
                }))(Simple_JSON.readArray(Simple_JSON.readRecord()(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function ($dollar__unused) {
                    return "completed";
                }))(Simple_JSON.readBoolean)(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function ($dollar__unused) {
                    return "description";
                }))(Simple_JSON.readString)(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function ($dollar__unused) {
                    return "id";
                }))(Simple_JSON.readInt)(Simple_JSON.readFieldsNil)()())()())()())))(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function ($dollar__unused) {
                    return "uid";
                }))(Simple_JSON.readInt)(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function ($dollar__unused) {
                    return "visibility";
                }))(Todo_Footer.readVisibility)(Simple_JSON.readFieldsNil)()())()())()())()()))(localStorageKey)();
                if (persisted instanceof Data_Maybe.Just) {
                    return send(v1)(new LoadState(persisted.value0))();
                };
                return Data_Unit.unit;
            };
        });
    };
    return React_Basic.make()(component)({
        initialState: initialState,
        didMount: didMount,
        render: render,
        didUpdate: didUpdate
    })({});
};
export {
    startNavigation
} from "./foreign.js";
export {
    initialState,
    localStorageKey,
    saveState,
    EditNewTodo,
    SubmitNewTodo,
    TaskCheck,
    TaskUpdate,
    TaskDelete,
    ClearCompleted,
    CheckAllTasks,
    UpdateVisibility,
    LoadState,
    Noop,
    component,
    app,
    taskEntry,
    taskList
};
